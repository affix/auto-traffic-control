#!/usr/bin/env python3

import pathlib
import shutil
import subprocess
import sys

import setuptools.command.build_py


class BuildAtcApi(setuptools.Command):
    user_options = []

    def initialize_options(self) -> None:
        pass

    def finalize_options(self) -> None:
        pass

    def run(self) -> None:
        self.execute(
            self._build_api, (), "Build gRPC atc module for auto-traffic-control"
        )

    @staticmethod
    def _build_api():
        here = pathlib.Path(__file__).parent
        src = (here / "src").absolute()
        src.mkdir(exist_ok=True)

        # Clean src dir
        src_atc = src / "atc"
        if src_atc.exists():
            for subdir in list(src_atc.glob("*")):
                if subdir.is_dir():
                    shutil.rmtree(subdir, ignore_errors=True)

        api = (here / ".." / ".." / "api").resolve()
        v1 = api / "atc" / "v1"
        v1_files = [str(p) for p in v1.glob("*") if p.is_file()]
        assert len(v1_files) > 0

        subprocess.run(
            [
                sys.executable,
                "-m",
                "grpc_tools.protoc",
                f"--proto_path={api}",
                f"--python_out={src}",
                f"--grpc_python_out={src}",
                f"--mypy_out={src}",
                f"--mypy_grpc_out={src}",
            ]
            + v1_files,
            check=True,
        )

        init_head = b"""\"\"\"
@generated by setup.  Do not edit manually!
isort:skip_file
\"\"\"\n\n"""

        # Generate init files
        for d in src_atc.glob("*"):
            if d.is_dir():
                all_imports = set()
                for f in d.glob("*.py"):
                    if not f.is_file() or f.name.startswith("_"):
                        continue
                    all_imports.add(f.name.replace(".py", ""))

                all_imports = [f"from .{x} import *" for x in sorted(all_imports)]
                all_imports = "\n".join(all_imports)
                all_imports = init_head + all_imports.encode("utf-8") + b"\n"

                with (d / "__init__.py").open("wb") as fd:
                    fd.write(all_imports)


class BuildPyWithApi(setuptools.command.build_py.build_py):
    def get_source_files(self):
        self.run_command("build_atc_api")
        return super().get_source_files()


setuptools.setup(cmdclass={"build_py": BuildPyWithApi, "build_atc_api": BuildAtcApi})
